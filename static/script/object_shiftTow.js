function shiftTow(button, route) {
    var userRoleId = parseInt(document.getElementById('header__auth__role_id').textContent);
    var row = button.closest('tr');
    var className = row.className;
    var cur_lvl = parseInt(className.split('lvl-')[1]);
    var newRow = row.cloneNode(true);
    var columns = row.cells.length;
    var rowNumber = row.rowIndex;
    var currentRow = button.closest('tr');
    var preRow = row.previousElementSibling;
    var nextRow = row.nextElementSibling;
    var taskRow = row.nextElementSibling;
    var pre_lvl = preRow? parseInt(preRow.className.split('lvl-')[1]):0;
    var p_id = -1;
    if  (!['Left', 'Right', 'Up', 'Down'].includes(route) || (cur_lvl <= 0 && route == 'Left')|| (cur_lvl >= 9 && route == 'Right')) {
        return createDialogWindow(status='error', description=['–û—à–∏–±–∫–∞', '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ']);
    }
    // –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ–º –≤ –¥–æ–≥–æ–≤–æ—Ä–µ, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–∞
    if (document.URL.split('/contract-list/card/').length > 1) {
        newRow.querySelector('.tow_date_start').value = document.getElementById('ctr_card_date_start').value;
        newRow.querySelector('.tow_date_finish').value = document.getElementById('ctr_card_date_finish').value;
    }
   // –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö —Å—Ç—Ä–æ–∫
    var children_list = []

    var tow_lvl = nextRow? parseInt(nextRow.className.split('lvl-')[1]):'';

    //–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–µ–¥–µ–ª—å–Ω–æ–≥–æ —Å–¥–≤–∏–≥–∞ –≤–ø—Ä–∞–≤–æ/–≤–ª–µ–≤–æ
    while (nextRow && tow_lvl > cur_lvl) {
        tow_lvl = parseInt(nextRow.className.split('lvl-')[1]);
        if (![1, 4, 5].includes(userRoleId) && nextRow.dataset.is_not_edited) {
            return createDialogWindow(status='error', description=['–≠—Ç—É —Å—Ç—Ä–æ–∫—É —É–¥–∞–ª–∏—Ç—å –¥–≤–∏–≥–∞—Ç—å, —Ç.–∫. –≤–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∏–¥ —Ä–∞–±–æ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥–æ–≥–æ–≤–æ—Ä—É']);
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ tow –Ω–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥–æ–≥–æ–≤–æ—Ä—É –∏ –∏–º –º–æ–∂–Ω–æ –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å

        // –ò—â–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π (—Ç–µ, —á–µ–π –ª–≤–ª –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –≤—ã—à–µ)
        if (tow_lvl > cur_lvl) {
            if (route == 'Right') {
                if (tow_lvl+1 > 10) {
                    return createDialogWindow(status='error', description=['–û—à–∏–±–∫–∞', '–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏']);
                }
            }
            if (route == 'Left') {
                if (tow_lvl < 0) {
                    return createDialogWindow(status='error', description=['–û—à–∏–±–∫–∞', '–£—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1']);
                }
            }
            nextRow = nextRow.nextElementSibling;
        }
    }

    var nextRow = row.nextElementSibling;
    var tow_lvl = nextRow? parseInt(nextRow.className.split('lvl-')[1]):'';

    while (nextRow && tow_lvl > cur_lvl) {
        tow_lvl = parseInt(nextRow.className.split('lvl-')[1])
        // –ò—â–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π (—Ç–µ, —á–µ–π –ª–≤–ª –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –≤—ã—à–µ)
        if (tow_lvl > cur_lvl) {
            if (route == 'Right') {
                nextRow.className = 'lvl-' + (tow_lvl+1)
            }
            if (route == 'Left') {
                nextRow.className = 'lvl-' + (tow_lvl-1)
            }

            var child = nextRow

            children_list.push(child)
            nextRow = nextRow.nextElementSibling;
        }
    }

    if (route == 'Right') {
        newRow.className = 'lvl-' + (cur_lvl)
        row.className = 'lvl-' + (cur_lvl+1)
        newRow.id = proj_url + '_' + route + '_' + new Date().getTime()
        for (var i=0; i<newRow.getElementsByTagName('td').length; i++) {
            var tagN = newRow.getElementsByTagName('td')[i].children;
            for (var i1=0; i1<tagN.length; i1++) {
                if (tagN[i1].tagName == 'INPUT') {
                    tagN[i1].value = '';
                }
            }
        }
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        clearDataAttributeValue(newRow);
        var textInputs = newRow.querySelectorAll('input[type="text"]');
        // Loop through each text input and clear its value
        textInputs.forEach(function (input) {
            input.value = '';
        });
        // Find the checkbox within the selected row and uncheck it
        var checkbox = newRow.querySelector('input[type="checkbox"]');
        if (checkbox) {
            checkbox.checked = document.URL.split('/objects/').length > 1? false:true;
        }

        // –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ–º –≤ –¥–æ–≥–æ–≤–æ—Ä–µ, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–∞
        if (document.URL.split('/contract-list/card/').length > 1) {
            newRow.querySelector('.tow_date_start').value = document.getElementById('ctr_card_date_start').value;
            newRow.querySelector('.tow_date_finish').value = document.getElementById('ctr_card_date_finish').value;
        }

        row.parentNode.insertBefore(newRow, row);
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —è—á–µ–π–∫–∏
        addButtonsForNewRow(newRow);

        preRow = newRow.previousElementSibling? newRow.previousElementSibling: row;
        pre_lvl = preRow? parseInt(preRow.className.split('lvl-')[1]):cur_lvl;
        p_id = findParent(curRow_fP=newRow, cur_lvl_fP=cur_lvl, pre_lvl_fP=pre_lvl, preRow_fP=preRow);

        UserChangesLog(c_id=newRow.id, rt='New', u_p_id=p_id, c_row=newRow); // Right - parent-new row
        UserChangesLog(c_id=row.id, rt=route, u_p_id=newRow.id, c_row=row); // Right - current row

        // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–≥–æ–≤–æ—Ä–∞, —Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–∞
        if (document.URL.split('/contract-list/card/').length > 1) {
            setNewRowContractFunc(newRow);
            isEditContract();
            return;
        }
        var edit_btn = document.getElementById("edit_btn");
        if (!edit_btn.hidden) {
            editTow();
        }
        //–î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–ª–∏—è–Ω–∏–π tow –µ—Å–ª–∏ –º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–≤–∏–¥—ã —Ä–∞–±–æ—Ç"
        if (document.URL.split('/objects/').length > 1) {
            newRow.addEventListener('click', function() {mergeTowRow(this);});
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –¥–µ—Ç–µ–π –∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ TOW
            setNewRowTowFunc(false, newRow);
        }
        return;
    }

    else if (route == 'Up') {
        while (preRow) {
            var tow_lvl = parseInt(preRow.className.split('lvl-')[1])
            prePreRow = preRow.previousElementSibling;
            if (prePreRow) {
                var pre_lvl = parseInt(prePreRow.className.split('lvl-')[1]);
            }
            else if (tow_lvl != cur_lvl && !prePreRow) {
                return createDialogWindow(status='error', description=['–û—à–∏–±–∫–∞', '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ', '–í —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤—ã—à–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ —É—Ä–æ–≤–Ω—é –≤–∏–¥–∞ —Ä–∞–±–æ—Ç']);
            }

            if (tow_lvl == cur_lvl || (tow_lvl < cur_lvl && pre_lvl == cur_lvl) || pre_lvl+1 == cur_lvl) {
                row.parentNode.insertBefore(row, preRow);

                p_id = findParent(curRow_fP=row, cur_lvl_fP=cur_lvl, pre_lvl_fP=pre_lvl, preRow_fP=prePreRow);

                UserChangesLog(c_id=row.id, rt=route, u_p_id=p_id, c_row=row); // Up - current row
                if (children_list.length){
                    for (tow of children_list) {
                        row.parentNode.insertBefore(tow, preRow);
                    }
                }

                // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–≥–æ–≤–æ—Ä–∞, —Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–∞
                if (document.URL.split('/contract-list/card/').length > 1) {
                    isEditContract();
                    return;
                }
                var edit_btn = document.getElementById("edit_btn");
                if (!edit_btn.hidden) {
                    editTow();
                }
                return;
            }
            preRow = preRow.previousElementSibling;
        }
        return createDialogWindow(status='error', description=['–û—à–∏–±–∫–∞', '‚ú® –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –í—ã—à–µ —Ç–æ–ª—å–∫–æ –∑–≤—ë–∑–¥—ã üåå']);
    }
    else if (['Down', 'Left'].includes(route)) {
        var extra_row = 1; //–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–≤–Ω–∏–∑" - —ç—Ç–æ –ø–ª—é—Å –æ–¥–∏–Ω. –ò–Ω–∞—á–µ –Ω—É–ª—å

        if (route == 'Left') {
            //newRow.className = row.className;
            row.className = 'lvl-' + (cur_lvl-1);
            cur_lvl = cur_lvl-1;
            extra_row = 0;
            if (!nextRow) {
                preRow = row.previousElementSibling;
                pre_lvl = parseInt(preRow.className.split('lvl-')[1]);
                p_id = findParent(curRow_fP=row, cur_lvl_fP=cur_lvl, pre_lvl_fP=pre_lvl, preRow_fP=preRow);
                UserChangesLog(c_id=row.id, rt=route, u_p_id=p_id, c_row=row); // Left - current row

                // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–≥–æ–≤–æ—Ä–∞, —Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–∞
                if (document.URL.split('/contract-list/card/').length > 1) {
                    isEditContract();
                    return;
                }
                var edit_btn = document.getElementById("edit_btn");
                if (!edit_btn.hidden) {
                    editTow();
                }
                return;
            }
        }

        while (nextRow) {

            var tow_lvl = parseInt(nextRow.className.split('lvl-')[1])
            nextNextRow = nextRow.nextElementSibling;

            if (nextNextRow) {
                var next_lvl = parseInt(nextNextRow.className.split('lvl-')[1])
            }
            else if (!nextNextRow &&  cur_lvl > tow_lvl + extra_row) {
                return createDialogWindow(status='error', description=['–û—à–∏–±–∫–∞', '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ', '–í —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –Ω–∏–∂–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ —É—Ä–æ–≤–Ω—é –≤–∏–¥–∞ —Ä–∞–±–æ—Ç']);
            }
            var row_after = nextRow;

            ver1 = 0;
            ver2 = 0;
            ver3 = 0;
            // –£—Ä–æ–≤–µ–Ω—å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ (tow) –†–ê–í–ï–ù –Ω–∞–∂–∞—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ —Ä–∞–≤–µ–Ω –Ω–∞–∂–∞—Ç–æ–π + —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –¥–µ—Ç–µ–π
            if (tow_lvl == cur_lvl && row.rowIndex + children_list.length + extra_row != nextRow.rowIndex) {
                row_after = nextRow;
                ver1 = 1;
            }
            else if (tow_lvl >= cur_lvl && cur_lvl > next_lvl) {
                // –£—Ä–æ–≤–µ–Ω—å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ (tow) –ë–û–õ–¨–®–ï –Ω–∞–∂–∞—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ —É—Ä–æ–≤–µ–Ω—å –Ω–∞–∂–∞—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ë–û–õ–¨–®–ï —Å–ª–µ–¥—É—é—â–µ–π
                row_after = nextNextRow;
                ver2 = 1;
            }
            else if (cur_lvl == tow_lvl + 1) {
                // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—å—à–µ –Ω–∞–∂–∞—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
                row_after = route == 'Left'? nextRow:nextNextRow;
                ver3 = 1;
            }

            if (ver1 || ver2 || ver3) {
                row.parentNode.insertBefore(row, row_after);
                if (children_list.length){
                    for (tow of children_list) {
                        row.parentNode.insertBefore(tow, row_after);
                    }
                }

                preRow = row.previousElementSibling;
                let preRow_lvl = parseInt(preRow.className.split('lvl-')[1]);

                prePreRow = preRow.previousElementSibling;
                pre_pre_lvl = prePreRow? parseInt(prePreRow.className.split('lvl-')[1]):preRow_lvl;
                prePreRow = prePreRow? prePreRow:preRow;

                p_preRow_id = findParent(curRow_fP=preRow, cur_lvl_fP=preRow_lvl, pre_lvl_fP=pre_pre_lvl,preRow_fP=prePreRow);


                pre_lvl = parseInt(preRow.className.split('lvl-')[1]);
                p_id = findParent(curRow_fP=row, cur_lvl_fP=cur_lvl, pre_lvl_fP=pre_lvl, preRow_fP=preRow);

                UserChangesLog(c_id=row.id, rt=route, u_p_id=p_id, c_row=row); // ['Down', 'Left'] - current row
                UserChangesLog(c_id=preRow.id, rt=route, u_p_id=p_preRow_id, c_row=preRow); // ['Down', 'Left'] - previous row

                // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–≥–æ–≤–æ—Ä–∞, —Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–∞
                if (document.URL.split('/contract-list/card/').length > 1) {
                    isEditContract();
                    return;
                }
                var edit_btn = document.getElementById("edit_btn");
                if (!edit_btn.hidden) {
                    editTow();
                }
                return;
            }
            else if (!nextNextRow && (tow_lvl >= cur_lvl || cur_lvl == tow_lvl + 1)) {
                if (children_list.length){
                    for (tow of children_list) {
                        row.parentNode.appendChild(tow);
                    }
                    row.parentNode.insertBefore(row, children_list[0]);
                    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —è—á–µ–π–∫–∏
//                    addButtonsForNewRow(row);
                }
                else {
                    row.parentNode.appendChild(row);
                }
                preRow = row.previousElementSibling;
                pre_lvl = parseInt(preRow.className.split('lvl-')[1]);
                p_id = findParent(curRow_fP=row, cur_lvl_fP=cur_lvl, pre_lvl_fP=pre_lvl, preRow_fP=preRow);

                UserChangesLog(c_id=row.id, rt=route, u_p_id=p_id, c_row=row); // ['Down', 'Left'] - current row last row in table

                // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–≥–æ–≤–æ—Ä–∞, —Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–∞
                if (document.URL.split('/contract-list/card/').length > 1) {
                    isEditContract();
                    return;
                }
                var edit_btn = document.getElementById("edit_btn");
                if (!edit_btn.hidden) {
                    editTow();
                }
                return;
            }

            nextRow = nextRow.nextElementSibling;
        }
        return createDialogWindow(status='error', description=['–û—à–∏–±–∫–∞', 'üêã –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –í—ã –≤ —Å–∞–º–æ–º –Ω–∏–∑—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ü§ø']);
    }
}

function findParent(curRow_fP, cur_lvl_fP, pre_lvl_fP, preRow_fP) {
    var p_id = -1;
    if (curRow_fP.className=='lvl-0') {
        p_id = '';
        return p_id;
    }
    else {
        if (cur_lvl_fP-1 == pre_lvl_fP) {
            p_id = preRow_fP.id;
        }
        else {
            while (cur_lvl_fP-1 != pre_lvl_fP && preRow_fP) {
                var pre_lvl_fP = parseInt(preRow_fP.className.split('lvl-')[1]);
                if (!preRow_fP.previousElementSibling) {
                    return preRow_fP.id
                }
                preRow_fP = preRow_fP.previousElementSibling;
            }
            p_id = preRow_fP.nextElementSibling.id;
        }
    }
    if (p_id == -1) {
    }
    return p_id
}

function UserChangesLog(c_id, rt, u_p_id, c_row=false, change_lvl=false) {
        if (u_p_id == c_id) {
            return createDialogWindow(status='error', description=[
            '–û—à–∏–±–∫–∞',
            '–ü—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –Ω–∞–¥ –≤–∏–¥–æ–º —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–∏–¥ —Ä–∞–±–æ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É']);
        }
        if (!highestRow.length) {
            highestRow = [c_row.rowIndex, c_row.id];
        }
        else {
            if (c_row.rowIndex < highestRow[0]) {
                highestRow = [c_row.rowIndex, c_row.id];
            }
        }
        userChanges[c_id] = {parent_id: u_p_id};

        if (['Before', 'After', 'New'].includes(rt)) {
            newRowList.add(c_id);
        }
}

function editTow() {
    var edit_btn = document.getElementById("edit_btn");
    var save_btn = document.getElementById("save_btn");
    var cancel_btn = document.getElementById("cancel_btn");

    let mergeTow = $('.mergeTowRow');

    if (edit_btn.hidden) {
        edit_btn.hidden = 0;
        save_btn.hidden = true;
        cancel_btn.hidden = true;
    }
    else {
        //–û–±–Ω—É–ª—è–µ–º –≤—Å–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–ª–∏—è–Ω–∏–µ TOW
        mergeTow.each(function() {this.classList.remove("mergeTowRow");});

        edit_btn.hidden = true;
        save_btn.hidden = 0;
        cancel_btn.hidden = 0;
    }

    const tab = document.getElementById("towTable");
    var tab_tr0 = tab.getElementsByTagName('tbody')[0];

    var input_tow_name = tab_tr0.querySelectorAll(".input_tow_name");
    var div_tow_button = tab_tr0.querySelectorAll(".div_tow_button");
    var select_tow_dept = tab_tr0.querySelectorAll(".select_tow_dept");
    var checkbox_time_tracking = tab_tr0.querySelectorAll(".checkbox_time_tracking");
    let tow_cost = tab_tr0.querySelectorAll(".tow_cost");

    for (var inp of input_tow_name) {
        inp.readOnly = 0;
    }
    for (var dtb of div_tow_button) {
        dtb.hidden = 0;
    }
    for (var sel of select_tow_dept) {
        sel.disabled = 0;
    }
    for (var che of checkbox_time_tracking) {
        che.disabled = 0;
    }
    for (var tc of tow_cost) {
        tc.readOnly = 0;
    }
}

function editDescription(button, type='', editDescription_row=false) {
    if (!editDescription_row) {
        var editDescription_row = button.closest('tr');
    }
    else {

    }
    var row_id = editDescription_row.id;

    var elem = editDescription_row.querySelectorAll('.'+type)[0];

    var elem_value = null;
    var first_value = null;
    if (elem.type == 'select-one') {
        if (elem.disabled) {
            return
        }
        elem_value = elem.options[elem.selectedIndex].text;
        first_value = elem_value;
    }
    else if (elem.type == 'checkbox') {
        if (elem.disabled) {
            return
        }
        elem_value = elem.checked;
        //first_value = elem_value? !elem_value:elem_value;
        first_value = 3;
    }
    else {
        if (elem.readOnly) {
            return
        }
        elem_value = elem.value;
        first_value = null;
    }
    //–ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä tow –µ—â—ë –Ω–µ –≤–Ω–µ—Å–µ–Ω, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ [0] –∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ[1]
    if (!editDescrRowList[row_id]) {
        editDescrRowList[row_id] = {}
    }
    if (!editDescrRowList[row_id][type]) {
        editDescrRowList[row_id][type] = [first_value, elem_value]
    }
    else if (editDescrRowList[row_id][type][1] != elem_value) {
        editDescrRowList[row_id][type][1] = elem_value
    }
}

function saveTowChanges(text_comment=false) {
    if (document.URL.split('/contract-list/card/').length > 1 &&
             document.URL.split('/contract-list/card/new/').length <= 1 && text_comment == false) {
        return createDialogWindow(status='error', description=['–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', '–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ']);
    }

    deletedRowList.forEach(deletedRowList_row => {
        if (userChanges[deletedRowList_row]) {
            delete userChanges[deletedRowList_row];
        }
        if (editDescrRowList[deletedRowList_row]) {
            delete editDescrRowList[deletedRowList_row];
        }
        if (newRowList.has(deletedRowList_row)) {
            newRowList.delete(deletedRowList_row);
            deletedRowList.delete(deletedRowList_row);
        }
    });


    var edit_btn = document.getElementById("edit_btn");
    var save_btn = document.getElementById("save_btn");
    var cancel_btn = document.getElementById("cancel_btn");
    if (edit_btn.hidden) {
        edit_btn.hidden = 0;
        save_btn.hidden = 1;
        cancel_btn.hidden = 1;
    }
    else {
        edit_btn.hidden = 1;
        save_btn.hidden = 0;
        cancel_btn.hidden = 0;
    }
    const tab = document.getElementById("towTable");

    //////////////////////////////////////////////////////////////////////////////////////////////
    // –ò—â–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏

    for (const [k, v] of Object.entries(userChanges)) {
        var userChanges_x = tab.querySelector(`[id='${k}']`);
        userChanges[k]['lvl'] = userChanges_x.rowIndex;
    }
    var div_tow_first_row = tab.getElementsByTagName('tbody')[0].getElementsByTagName('tr')[0].className;
    if (highestRow.length && div_tow_first_row != 'div_tow_first_row') {
        var row_highestRow = tab.querySelector(`[id='${highestRow[1]}']`);
        userChanges[row_highestRow.id]['lvl'] = row_highestRow.rowIndex;

        var newRow_highestRow = row_highestRow.nextElementSibling;

        while (newRow_highestRow) {
            if (!userChanges[newRow_highestRow.id]) {
                userChanges[newRow_highestRow.id] = {lvl: newRow_highestRow.rowIndex};
            }
            newRow_highestRow = newRow_highestRow.nextElementSibling;
        }
    }

    //////////////////////////////////////////////////////////////////////////////////////////////
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
    for (const [k, v] of Object.entries(editDescrRowList)) {
        // –ü—Ä–æ—Ö–æ–¥–∏–º –≤ tow –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑–º–µ–Ω—è–µ–º–æ–º—É –∫–ª—é—á—É
        for (const [k2, v2] of Object.entries(v)) {
            // –ò—â–µ–º tow –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ –∫–ª—é—á–∞ k2 (—ç—Ç–æ –∫–ª–∞—Å—Å –∏–∑–º–µ–Ω—è–µ–º–æ–π —è—á–µ–π–∫–∏)
            //var elem = tab.querySelector("#"+k.toString()).querySelector("."+k2);
            var elem = tab.querySelector(`[id='${k}']`).querySelector("."+k2);

            var elem_value = null;
            if (elem.type == 'select-one') {
                elem_value = elem.options[elem.selectedIndex].value;
            }
            else if (elem.type == 'checkbox') {
                elem_value = elem.checked;
            }
            else {
                elem_value = elem.value;
            }

            // –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º—É, —É–¥–∞–ª—è–µ–º –∫–ª—é—á k2
            if (elem_value == v2[0]) {
                delete editDescrRowList[k][k2];
            }
            else {
                editDescrRowList[k][k2] = elem_value;
            }
            // –µ—Å–ª–∏ —É –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π tow –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∫–ª—é—á–µ–π, —É–¥–∞–ª—è–µ–º tow –∏–∑ –º–∞—Å—Å–∏–≤–∞
            if (!Object.keys(editDescrRowList[k]).length) {
                delete editDescrRowList[k];
            }
        }
    }


    if (Object.keys(userChanges).length || Object.keys(editDescrRowList).length || newRowList.size || deletedRowList.size) {

        list_newRowList = [];
        newRowList.forEach(newRowList_row => {
            list_newRowList.push(newRowList_row);
        });

        list_deletedRowList = [];
        deletedRowList.forEach(newRowList_row => {
            list_deletedRowList.push(newRowList_row);
        });

        console.log('       userChanges')
        console.log(userChanges)
        console.log('___________________')
        console.log('       editDescrRowList')
        console.log(editDescrRowList)
        console.log('___________________')
        console.log('       list_newRowList')
        console.log(list_newRowList)
        console.log('___________________')
        console.log('       list_deletedRowList')
        console.log(list_deletedRowList)
        console.log('___________________')

        var page_url = null;

        //        var sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

        if (document.URL.split('/objects/').length > 1) {
            page_url = decodeURIComponent(document.URL.substring(document.URL.lastIndexOf('/objects')+9, document.URL.lastIndexOf('/')));
            fetch(`/save_tow_changes/${page_url}`, {
                "headers": {
                    'Content-Type': 'application/json'
                },
                "method": "POST",
                "body": JSON.stringify({
                    'userChanges': userChanges,
                    'editDescrRowList': editDescrRowList,
                    'list_newRowList': list_newRowList,
                    'list_deletedRowList': list_deletedRowList,

                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        return location.reload();
                    }
                    else {
                        let description = data.description;
                        description.unshift('–û—à–∏–±–∫–∞');
                        return createDialogWindow(status='error', description=description);
                    }
                })
            return;
        }
        else if (document.URL.split('/contract-list/card/').length > 1) {

            contract_id = document.URL.split('/contract-list/card/')[1];
            var save_contract = saveContract(text_comment=text_comment);
            if (save_contract[0] == 'error') {
                return createDialogWindow(status='error', description=save_contract[1]);
            }

            //–æ–∫–Ω–æ –∑–∞–≥–ª—É—à–∫–∞, –ø–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
            createDialogWindow(status='info', description=['–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è...'], func=false, buttons=false, text_comment=false, loading_windows=true);

            fetch(`/save_contract/${contract_id}`, {
                "headers": {
                    'Content-Type': 'application/json'
                },
                "method": "POST",
                "body": JSON.stringify({
                    'userChanges': userChanges,
                    'editDescrRowList': editDescrRowList,
                    'list_newRowList': list_newRowList,
                    'list_deletedRowList': list_deletedRowList,
                    'ctr_card': save_contract['ctr_card'],
                    'list_towList': save_contract['list_towList'],
                })
            })
                .then(response => response.json())
                .then(data => {
                    removeLogInfo();

                    if (data.status === 'success') {
                        if (data.contract_id) {
                            return window.location.href = `/contract-list/card/${data.contract_id}`;
                        }
                        else {
                            return location.reload();
                        }
                    }
                    else {
                        let description = data.description;
                        description.unshift('–û—à–∏–±–∫–∞');
                        return createDialogWindow(status='error', description=description);
                    }
                })
        }
    }
    else {
        if (document.URL.split('/objects/').length > 1) {
                //            location.reload();
            return createDialogWindow(status='error', description=['–û—à–∏–±–∫–∞', '–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ']);
        }
        else if (document.URL.split('/contract-list/card/').length > 1) {
            contract_id = document.URL.split('/contract-list/card/')[1];
            var save_contract = saveContract(text_comment=text_comment);
            if (save_contract[0] == 'error') {

                return createDialogWindow(status='error', description=save_contract[1]);
            }
            fetch(`/save_contract/${contract_id}`, {
                "headers": {
                    'Content-Type': 'application/json'
                },
                "method": "POST",
                "body": JSON.stringify({
                    'userChanges': null,
                    'editDescrRowList': null,
                    'list_newRowList': null,
                    'list_deletedRowList': null,
                    'ctr_card': save_contract['ctr_card'],
                    'list_towList': save_contract['list_towList'],
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        if (data.without_change) {
                            return createDialogWindow(status='info', description=data.description);
                        }
                        if (data.contract_id) {
                            return window.location.href = `/contract-list/card/${data.contract_id}`;
                        }
                        else {
                            return location.reload();
                        }
                    }
                    else {
                        let description = data.description[0];
                        description.unshift('–û—à–∏–±–∫–∞');
                        return createDialogWindow(status='error', description=description);
                    }
                })
        }
    }
}

function cancelTowChanges() {
    window.location.href = document.URL;
    return createDialogWindow(status='error', description=['–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞']);
}

function clearDataAttributeValue(tow_cdav) {
    // –ó–Ω–∞—á–µ–Ω–∏—è –∏–Ω–ø—É—Ç–æ–≤
    let tow_cdav_dataset_value = tow_cdav.querySelectorAll("[data-value]");
    tow_cdav_dataset_value.forEach(function (input) {
        if (input.dataset.value) {
            input.dataset.value = 0;
        }
    });

    // –ó–Ω–∞—á–µ–Ω–∏—è tow_cost_protect - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ tow
    let tow_cdav_dataset_t_c_p = tow_cdav.querySelectorAll("[data-tow_cost_protect]");
    tow_cdav_dataset_t_c_p.forEach(function (input) {
        if (input.dataset.tow_cost_protect) {
            input.dataset.tow_cost_protect = null;
        }
    });

    // –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ–∫–±–æ–∫—Å–∞ –≤—ã–±–æ—Ä–∞ tow (–æ–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∫–æ–≥–¥–∞ –∫ tow –ø—Ä–∏–≤—è–∑–∞–Ω –∞–∫—Ç –∏–ª–∏ –ø–ª–∞—Ç—ë–∂)
    let tow_contract = tow_cdav.querySelector(".tow_contract");
    tow_contract? tow_contract.title = '':false;
    let checkbox_time_tracking = tow_cdav.querySelector(".checkbox_time_tracking");
    checkbox_time_tracking.disabled = false;
}